<?php

/**
 * Implements hook_menu()
 */
function ipe_menu() {
  $items = array();
  $items['admin/field/ipe/%/%/%'] = array(
    // Access is controlled after we have inspected the entity which
    // can't easily happen until the callback.
    'access arguments' => array(TRUE),
    'access callback'  => TRUE,
    'page callback'    => 'ipe_field_edit',
    'page arguments'   => array(3, 4, 5),
    'file'             => 'includes/pages.inc',
    'delivery callback'=> 'ajax_deliver',
    'theme callback'   => 'ajax_base_page_theme',
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ipe_form_fape_field_edit_form_alter(&$form, &$form_state) {
  if (!array_key_exists('ipe', $form_state)) {
    return;
  }

  // Simplify simple field forms that contain only one form item.
  // TODO: somehow make this less hacky.
  $elements = element_children($form);
  $defaults = array('actions', 'form_build_id', 'form_token', 'form_id');
  $form_items = array_diff($elements, $defaults);
  if (count($form_items) == 1) {
    $k = $form_items[0];
    if ($form[$k]['#type'] == 'container') {
      $l = $form[$k]['#language'];
      switch (count(element_children($form[$k][$l]))) {
        case 0:
          if ($form[$k][$l]['#type'] != 'checkbox') {
            unset($form[$k][$l]['#title']);
          }
          break;
        case 1:
          unset($form[$k][$l][0]['value']['#title']);
          break;
        default:
          // No changes.
          break;
      }
    }
    // Pseudofields that are language-independent, such as title, name and date.
    else if (!array_key_exists('#language', $form[$k])) {
      unset($form[$k]['#title']);
    }
  }

  $form['actions']['submit']['#attributes'] = array('class' => array('ipe-form-submit'));
}

/**
 * Implements hook_page_alter().
 */
function ipe_page_alter(&$page) {
  if (isset($page['page_top']['toolbar'])) {
    // Remove the toolbar drawer toggle by overriding toolbar.module's pre-render
    // function with our own.
    if (isset($page['page_top']['toolbar']['#pre_render'][0]) && $page['page_top']['toolbar']['#pre_render'][0] == 'toolbar_pre_render') {
      $page['page_top']['toolbar']['#pre_render'][0] = 'ipe_override_toolbar_pre_render';
    }
    // Replace the shortcut.module's toolbar pre-render function with our own.
    if (isset($page['page_top']['toolbar']['#pre_render'][1]) && $page['page_top']['toolbar']['#pre_render'][1] == 'shortcut_toolbar_pre_render') {
      $page['page_top']['toolbar']['#pre_render'][1] = 'ipe_override_shortcut_toolbar_pre_render';
    }

    // If the toolbar is available, add a pre-render function to display the
    // view/edit mode toggle.
    $page['page_top']['toolbar']['#pre_render'][] = 'ipe_toolbar_pre_render';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function ipe_module_implements_alter(&$implementations, $hook) {
  // Run ipe's hook_page_alter() after shortcut's, but retain the ordering.
  // We need this to be able to override shortcut's #pre_render callback for
  // rendering the shortcuts into the toolbar.
  if ($hook == 'page_alter') {
    unset($implementations['ipe']);
    $index = array_search('shortcut', array_keys($implementations));
    $implementations = array_slice($implementations, 0, $index + 1) + array('ipe' => FALSE) + array_slice($implementations, $index + 1);
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function ipe_field_formatter_info_alter(&$info) {
  // TODO: create a UI that allows users to override these defaults.

  // Add a new 'ipe' key to each formatter, with either of these values:
  //  - 'editable', i.e. these fields will be immediately editable;
  //  - 'form', i.e. these fields will load the field's form through AJAX;
  //  - 'disabled', i.e. these fields will not be editable inline.
  $a = array(
    // TODO: file/image
    'file_default'   => 'disabled',
    'file_table'     => 'disabled',
    'file_url_plain' => 'disabled',
    'image'          => 'disabled',
    'list_default'   => 'form',
    'list_key'       => 'form',
    'number_integer'     => 'form',
    'number_decimal'     => 'form',
    'number_unformatted' => 'form',
    'taxonomy_term_reference_link'         => 'form',
    'taxonomy_term_reference_plain'        => 'form',
    'taxonomy_term_reference_rss_category' => 'disabled',
    'text_default'            => 'direct',
    'text_plain'              => 'form',
    'text_trimmed'            => 'disabled',
    'text_summary_or_trimmed' => 'disabled',
  );
  foreach ($a as $k => $v) {
    if (array_key_exists($k, $info)) {
      $info[$k]['ipe'] = $v;
    }
  }
}

/**
 * Implements of hook_preprocess_HOOK().
 */
function ipe_preprocess_page(&$var) {
  // Special case: on node pages, the title of the node becomes the page title.
  if (array_key_exists('node', $var) && entity_access('update', 'node', $var['node'])) {
    // Pseudofield: title.
    $node_type = node_type_get_type($var['node']->type);
    if ($node_type->has_title) {
      $id = $var['node']->nid;
      $attributes = array(
        'class' => 'ipe-pseudofield ipe-field ipe-allowed ipe-type-direct',
        'data-ipe-field-label' => $node_type->title_label,
        'data-ipe-id'          => "node:$id:title",
      );
      $var['title_prefix']['ipe']['#markup'] = '<div ' . drupal_attributes($attributes) . '">';
      $var['title_suffix']['ipe']['#markup'] = '</div>';
    }
  }
}

/**
 * Implements of hook_preprocess_HOOK().
 */
function ipe_preprocess_node(&$var) {
  $entity_type = $var['elements']['#entity_type'];
  $entity      = $var['elements']['#node'];

  if (entity_access('update', $entity_type, $entity)) {
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $i = entity_get_info($entity_type);

    // Provide metadata through data-* attributes.
    $data_attributes = array(
      'data-ipe-id'              => "node:$id",
      'data-ipe-entity-label'    => $i['bundles'][$bundle]['label'],
      'data-ipe-entity-edit-url' => url("node/$id/edit"),
    );
    $var['attributes_array'] += $data_attributes;

    // Mark this entity as editable.
    $var['classes_array'][] = 'ipe-entity ipe-allowed';


    // Pseudofield: title.
    $node_type = node_type_get_type($bundle);
    if ($node_type->has_title) {
      $var['title_attributes_array']['class'] = 'ipe-pseudofield ipe-field ipe-allowed ipe-type-direct';
      $var['title_attributes_array']['data-ipe-field-label'] = $node_type->title_label;
      $var['title_attributes_array']['data-ipe-ipe'] = "node:$id:title";
    }

    if ($var['display_submitted']) {
      // Pseudofields: name (author) and date (authoring date).
      $var['submitted'] = ipe_node_render_submitted($var['name'], $var['date'], $id);
    }
  }
}

/**
 * Render pseudofields: name (author) and date (authoring date).
 */
function ipe_node_render_submitted($name, $date, $node_id) {
  return t(
    'Submitted by <span class="ipe-pseudofield ipe-field ipe-allowed ipe-type-form" data-ipe-id="!name-ipe-id" data-ipe-field-label="!name-label">!name-value</span> on <span class="ipe-pseudofield ipe-field ipe-allowed ipe-type-form" data-ipe-id="!date-ipe-id" data-ipe-field-label="!date-label">!date-value</span>',
    array(
      '!name-value'  => $name,
      '!name-label'  => t('Author'),
      '!name-ipe-id' => "node:$node_id:name",
      '!date-value'  => $date,
      '!date-label'  => t('Authoring date'),
      '!date-ipe-id' => "node:$node_id:date",
    )
  );
}

/**
 * Implements of hook_preprocess_HOOK().
 */
function ipe_preprocess_field(&$var) {
  $entity_type = $var['element']['#entity_type'];
  $entity      = $var['element']['#object'];
  $field_name  = $var['element']['#field_name'];
  $formatter   = $var['element']['#formatter'];

  $formatter_info = field_info_formatter_types($formatter);
  if (!array_key_exists('ipe', $formatter_info)) {
    watchdog('ipe', '%formatter not yet compatible with IPE.', array('%formatter' => $formatter));
    return;
  }
  $ipe_ability = $formatter_info['ipe'];
  if ($ipe_ability == 'disabled') {
    return;
  }

  // If directly editable, check cardinality; if cardinality >1, then use a form
  // anyway.
  if ($ipe_ability == 'direct') {
    $field_info = field_info_field($field_name);
    if ($field_info['cardinality'] != 1) {
      $ipe_ability = 'form';
    }
  }

  if (entity_access('update', $entity_type, $entity) && field_access('edit', $field_name, $entity_type, $entity)) {
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $ei = entity_get_info($entity_type);
    $fi = field_info_instance($entity_type, $field_name, $bundle);

    // Provide metadata through data-* attributes.
    $data_attributes = array(
      'data-ipe-field-label'    => $fi['label'],
      'data-ipe-id'             => "$entity_type:$id:$field_name",
    );
    if (!array_key_exists('attributes_array', $var)) {
      $var['attributes_array'] = array();
    }
    $var['attributes_array'] += $data_attributes;

    // Mark this field as editable.
    if ($ipe_ability == 'direct') {
      $var['classes_array'][] = 'ipe-field ipe-allowed ipe-type-direct';
    }
    else if ($ipe_ability == 'form') {
      $var['classes_array'][] = 'ipe-field ipe-allowed ipe-type-form';
    }
  }
}

/**
 * Pre-render function for ipe.module; view/edit mode toggle.
*/
function ipe_toolbar_pre_render($toolbar) {
  $module_path = drupal_get_path('module', 'ipe');
require_once 'includes/form.inc';
  $toolbar['toolbar_drawer'][] = array(
    'view_edit_toggle' => array(
      // TODO: make this less hacky; but we might move to something else than radios!
      '#markup' => '
<div id="ipe-view-edit-toggle" class="form-radios">
  <div class="form-item form-type-radio">
    <input type="radio" id="ipe-view-edit-toggle--view" value="view" class="form-radio" name="ipe_view_edit_toggle" checked="checked">
    <label class="option" for="ipe-view-edit-toggle--view">' . t('View') . '</label>
  </div>
  <div class="form-item form-type-radio">
    <input type="radio" id="ipe-view-edit-toggle--edit" value="edit" class="form-radio" name="ipe_view_edit_toggle">
    <label class="option" for="ipe-view-edit-toggle--edit">' . t('Edit') . '</label>
  </div>
</div>',
      '#attached' => array(
        'library' => array(
          array('system', 'jquery.form'),
          array('system', 'drupal.ajax'),
        ),
        'js' => array(
          $module_path . '/js/ipe.js',
          array(
            'data' => array('ipe' => array('fieldFormURL' => url('admin/field/ipe/!entity_type/!id/!field_name'))),
            'type' => 'setting',
          ),
        ),
        'css' => array(
          $module_path . '/css/ipe.css',
        ),
      ),
    ),
  );

  return $toolbar;
}

/**
 * Override of pre-render function for toolbar.module.
 */
function ipe_override_toolbar_pre_render($toolbar) {
  // The original.
  $toolbar = toolbar_pre_render($toolbar);

  // The toolbar should never be collapsed.
  $_COOKIE['Drupal_toolbar_collapsed'] = 0;

  // Now we remove the toolbar drawer toggle.
  unset($toolbar['toolbar_toggle']);

  $toolbar['#attached']['css'][] = drupal_get_path('module', 'ipe') . '/overrides.css';

  return $toolbar;
}

/**
 * Override of pre-render function for shortcut.module.
 */
function ipe_override_shortcut_toolbar_pre_render($toolbar) {
  // The original.
  $toolbar = shortcut_toolbar_pre_render($toolbar);

  // Put the shortcuts themselves *after* their configure link in the HTML,
  // because we'll float them right.
  $shortcuts = array_shift($toolbar['toolbar_drawer'][0]);
  array_push($toolbar['toolbar_drawer'][0], $shortcuts);

  $toolbar['#attached']['css'][] = drupal_get_path('module', 'ipe') . '/overrides.css';

  return $toolbar;
}

