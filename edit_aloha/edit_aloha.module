<?php

/**
 * Implements hook_menu()
 */
function edit_aloha_menu() {
  $items = array();
  $items['alohaeditor/lookup/%'] = array(
    'page callback'    => 'edit_aloha_link_lookup',
    'page arguments'   => array(2),
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function edit_aloha_library() {
  $library_path = libraries_get_path('alohaeditor');
  // It should not be possible to reach this hook without having Aloha Editor
  // properly setup in the first place, but an extra check does not hurt.
  if (empty($library_path)) {
    return;
  }
  if (file_exists($library_path . '/src')) {
    $library_path .= '/src';
  }
  else {
    // @todo Check whether this is correct.
    $library_path .= '/aloha';
  }

  // @todo update this based on the input format settings.
  $plugins_list = array(
    'list' => drupal_map_assoc(array(
      'common/ui',
      'common/format',
      'common/align',
      'common/commands',
      'common/contenthandler',
      'common/characterpicker',
      'common/paste',
      'common/list',
      'common/block',
      'common/link',
      'extra/captioned-image',
      'edit_aloha/drupal',
    )),
  );
  $plugins_activated = '';
  if ($plugins_list) {
    foreach ($plugins_list['list'] as $key => $plugin) {
      if ($plugin == $key && !$plugin == '0') {
        $plugins_activated .= $plugin . ',';
      }
    }
  }
  if (substr($plugins_activated, -1) == ',') {
    $plugins_activated = substr($plugins_activated, 0, -1);
  }

  $plugin_path = drupal_get_path('module', 'edit_aloha') . '/aloha/drupal-ui';
  $aloha_settings = array(
    'baseUrl' => file_create_url($library_path . '/lib'),
    // Let AE/RequireJS know where edit_aloha's plug-in bundle lives.
    'bundles' => array('edit_aloha' => file_create_url(drupal_get_path('module', 'edit') . '/edit_aloha/aloha/')),
    // Overide parts of AE's default UI, so that we can have a custom UI with
    // minimal effort.
    'requireConfig' => array(
      'paths' => array(
        'ui/ui-plugin'  => file_create_url($plugin_path . '/lib/ui-plugin'),
        'ui/multiSplit' => file_create_url($plugin_path . '/lib/multiSplit'),
      )
    ),
    'plugins' => array(
      'load' => $plugins_activated,
      // Note: the DrupalContentHandler plug-in will ensure that only tags
      // specified in the editable's data-edit-allowed-tags attribute will be
      // allowed. Here, we must specify the whole range of available HTML tags.
      'format' => array('config' => array(
        // Inline HTML elements.
        'strong', 'em', 'b', 'i', 'u', 's', 'sub', 'sup',
        // Block-level HTML elements.
        'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'pre',
        // Non-HTML.
        'removeFormat',
      )),
      'list' => array('config' => array('ul', 'ol')),
    ),
    'contentHandler' => array(
      'insertHtml' => array('word', 'generic', 'drupal'),
      'handler' => array(
        'generic' => array('transformFormattings' => FALSE),
      ),
      'initEditable' => array(),
    ),
    'repository' => array(
        'drupal' => array('url' => url('alohaeditor/lookup/')),
    ),
    'sidebar' => array('disabled' => TRUE),
    'toolbar' => array(
         'tabs' => array(
             array(
                 'label' => 'Captioned Image',
                 'showOn' => array('scope' => 'Aloha.captionedimage'),
                 'components' => array('imgFloatLeft', 'imgFloatRight', 'imgFloatClear')
             )
         )
     ),
  );

  // Edit integration (".edit").
  $libraries['edit_aloha.edit'] = array(
    'title' => 'Edit: Aloha Editor integration',
    'website' => 'http://drupal.org/project/edit',
    'version' => NULL, // @TODO Figure out the correct way to do this.
    'js' => array(
      drupal_get_path('module', 'edit_aloha') . '/js/edit_aloha.js' => array(
        'defer'  => TRUE,
        'weight' => 100,
      ),
      // // Drupal AE plugin
      // drupal_get_path('module', 'edit_aloha') . '/aloha/drupal/lib/drupal-plugin.js' => array(
      //   'defer'  => FALSE,
      //   'weight' => 101,
      // ),
      // drupal_get_path('module', 'edit_aloha') . '/aloha/drupal/lib/repository.js' => array(
      //   'defer'  => FALSE,
      //   'weight' => 102,
      // ),
      // drupal_get_path('module', 'edit_aloha') . '/aloha/drupal/lib/drupalcontenthandler.js' => array(
      //   'defer'  => FALSE,
      //   'weight' => 103,
      // ),
      // Configure Edit's JS to use edit_aloha as the WYSIWYG.
      array(
        'data' => array('edit' => array(
          'wysiwyg' => 'edit_aloha',
          'settings' => $aloha_settings,
        )),
        'type' => 'setting',
      ),
    ),
    'dependencies' => array(
      array('edit_aloha', 'edit_aloha.wysiwyg'),
    ),
  );

  $common_path = $library_path . '/plugins/common';
  // The WYSIWYG files themselves (".wysiwyg").
  $libraries['edit_aloha.wysiwyg'] = array(
    'title' => 'Edit: Aloha Editor',
    'website' => 'http://aloha-editor.org/',
    'version' => NULL, // @TODO Figure out the correct way to do this.
    'js' => array(
      $library_path . '/lib/require.js' => array(
        'group' => JS_LIBRARY,
        'weight' => -1001,
        'defer' => TRUE,
      ),
      $library_path . '/lib/aloha.js' => array(
        'group' => JS_LIBRARY,
        'weight' => -1000,
        'defer' => TRUE,
        'attributes' => array(
          'data-aloha-defer-init' => 'true',
          'data-aloha-plugins' => $plugins_activated,
        ),
      ),
      // These are the files from the 'build-with-plugin-separated' profile.
      // They should be declared as their own libraries. Listed here for
      // convenience.

      // $common_path . '/ui/lib/ui-plugin.js' => array('defer' => TRUE),
      // $common_path . '/align/lib/align-plugin.js' => array('defer' => TRUE),
      // $common_path . '/format/lib/format-plugin.js' => array('defer' => TRUE),
      // $common_path . '/commands/lib/commands-plugin.js' => array('defer' => TRUE),
      // $common_path . '/list/lib/list-plugin.js' => array('defer' => TRUE),
      // $common_path . '/contenthandler/lib/contenthandler-plugin.js' => array('defer' => TRUE),
      // $common_path . '/paste/lib/paste-plugin.js' => array('defer' => TRUE),
    ),
    'css' => array(
      $library_path . '/css/aloha.css',
      drupal_get_path('module', 'edit_aloha') . '/css/edit_aloha.css',
    ),
  );

  return $libraries;
}

/**
 * Page callback; Drupal link repository look-up.
 */
function edit_aloha_link_lookup($lookup = false) {
  $lookup = check_plain($lookup);

  $search_results = node_search_execute($lookup);

  if (is_array($search_results) && empty($search_results[0])) {
    $search_results = false;
  }

  if (is_array($search_results)) {
    $json = array();
    foreach ($search_results as $result) {
      $json[] = array('u' => $result['link'], 't' => $result['title'], 's' => $result['score']);
    }
    print drupal_json_encode($json);
    exit;
  }
}
